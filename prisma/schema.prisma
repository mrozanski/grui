generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model citations {
  id               String        @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  source_id        String?       @db.Uuid
  cited_table      String        @db.VarChar(50)
  cited_record_id  String        @db.Uuid
  page_number      Int?
  section          String?       @db.VarChar(100)
  confidence_level String?       @db.VarChar(20)
  notes            String?
  created_at       DateTime?     @default(now()) @db.Timestamptz(6)
  data_sources     data_sources? @relation(fields: [source_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([cited_table, cited_record_id], map: "idx_citations_cited_record")
  @@index([confidence_level], map: "idx_citations_confidence")
  @@index([source_id], map: "idx_citations_source")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model contributions {
  id                                     String    @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  user_id                                String?   @db.Uuid
  contribution_type                      String?   @db.VarChar(50)
  table_name                             String?   @db.VarChar(50)
  record_id                              String?   @db.Uuid
  contribution_data                      Json?
  status                                 String?   @default("pending") @db.VarChar(20)
  reviewed_by                            String?   @db.Uuid
  reviewed_at                            DateTime? @db.Timestamptz(6)
  review_notes                           String?
  created_at                             DateTime? @default(now()) @db.Timestamptz(6)
  users_contributions_reviewed_byTousers users?    @relation("contributions_reviewed_byTousers", fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_contributions_user_idTousers     users?    @relation("contributions_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status], map: "idx_contributions_status")
  @@index([table_name, record_id], map: "idx_contributions_table_record")
  @@index([contribution_type], map: "idx_contributions_type")
  @@index([user_id], map: "idx_contributions_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model data_sources {
  id                String              @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  source_name       String              @db.VarChar(100)
  source_type       String?             @db.VarChar(50)
  url               String?             @db.VarChar(500)
  isbn              String?             @db.VarChar(20)
  publication_date  DateTime?           @db.Date
  reliability_score Int?
  notes             String?
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  citations         citations[]
  image_sources     image_sources[]
  market_valuations market_valuations[]

  @@index([source_type], map: "idx_data_sources_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model finishes {
  id                   String              @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  model_id             String?             @db.Uuid
  individual_guitar_id String?             @db.Uuid
  finish_name          String              @db.VarChar(100)
  finish_type          String?             @db.VarChar(50)
  color_code           String?             @db.VarChar(20)
  rarity               String?             @db.VarChar(20)
  created_at           DateTime?           @default(now()) @db.Timestamptz(6)
  individual_guitars   individual_guitars? @relation(fields: [individual_guitar_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  models               models?             @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model individual_guitars {
  id                         String              @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  model_id                   String?             @db.Uuid
  manufacturer_name_fallback String?             @db.VarChar(100)
  model_name_fallback        String?             @db.VarChar(150)
  year_estimate              String?             @db.VarChar(50)
  description                String?
  serial_number              String?             @unique @db.VarChar(50)
  production_date            DateTime?           @db.Date
  production_number          Int?
  significance_level         String?             @default("notable") @db.VarChar(20)
  significance_notes         String?
  current_estimated_value    Decimal?            @db.Decimal(12, 2)
  last_valuation_date        DateTime?           @db.Date
  condition_rating           String?             @db.VarChar(20)
  modifications              String?
  provenance_notes           String?
  created_at                 DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?           @default(now()) @db.Timestamptz(6)
  finishes                   finishes[]
  models                     models?             @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  market_valuations          market_valuations[]
  specifications             specifications[]

  @@index([model_id], map: "idx_individual_guitars_model")
  @@index([significance_level, current_estimated_value], map: "idx_individual_guitars_significance")
}

/// Image storage metadata table with direct entity associations
model images {
  id                String          @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  entity_type       String          @db.VarChar(50)
  entity_id         String          @db.Uuid
  image_type        String          @db.VarChar(50)
  is_primary        Boolean?        @default(false)
  display_order     Int?            @default(0)
  caption           String?
  storage_provider  String          @default("cloudinary") @db.VarChar(50)
  storage_key       String          @db.VarChar(500)
  original_url      String
  thumbnail_url     String?
  small_url         String?
  medium_url        String?
  large_url         String?
  xlarge_url        String?
  original_filename String?         @db.VarChar(255)
  mime_type         String?         @db.VarChar(100)
  file_size_bytes   Int?
  width             Int?
  height            Int?
  aspect_ratio      Decimal?        @db.Decimal(5, 3)
  dominant_color    String?         @db.VarChar(7)
  uploaded_by       String?         @db.Uuid
  uploaded_at       DateTime?       @default(now()) @db.Timestamptz(6)
  last_accessed     DateTime?       @db.Timestamptz(6)
  access_count      Int?            @default(0)
  is_validated      Boolean?        @default(false)
  validation_status String?         @default("pending") @db.VarChar(50)
  validation_notes  String?
  validated_by      String?         @db.Uuid
  validated_at      DateTime?       @db.Timestamptz(6)
  tags              String[]
  description       String?
  is_duplicate      Boolean?        @default(false)
  original_image_id String?         @db.Uuid
  duplicate_reason  String?
  image_sources     image_sources[]
  original_image    images?         @relation("ImageDuplicates", fields: [original_image_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  duplicate_images  images[]        @relation("ImageDuplicates")
  uploaded_by_user  users?          @relation("ImagesUploadedBy", fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  validated_by_user users?          @relation("ImagesValidatedBy", fields: [validated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([entity_type, entity_id], map: "idx_images_entity")
  @@index([image_type], map: "idx_images_type")
  @@index([uploaded_by], map: "idx_images_uploaded_by")
  @@index([uploaded_at], map: "idx_images_uploaded_at")
  @@index([storage_key], map: "idx_images_storage_key")
  @@index([storage_key, entity_type, entity_id], map: "idx_images_storage_duplicates")
}

/// Image sources for attribution
model image_sources {
  id                   String        @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  image_id             String?       @db.Uuid
  source_type          String        @db.VarChar(50)
  source_name          String?       @db.VarChar(255)
  source_url           String?
  copyright_holder     String?       @db.VarChar(255)
  license_type         String?       @db.VarChar(50)
  attribution_required Boolean?      @default(true)
  attribution_text     String?
  usage_rights         String?
  expiration_date      DateTime?     @db.Date
  data_source_id       String?       @db.Uuid
  created_at           DateTime?     @default(now()) @db.Timestamptz(6)
  data_sources         data_sources? @relation(fields: [data_source_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  image                images?       @relation(fields: [image_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([image_id], map: "idx_image_sources_image")
  @@index([source_type], map: "idx_image_sources_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model manufacturers {
  id            String          @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  name          String          @db.VarChar(100)
  country       String?         @db.VarChar(50)
  founded_year  Int?
  website       String?         @db.VarChar(255)
  status        String?         @default("active") @db.VarChar(20)
  notes         String?
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  models        models[]
  product_lines product_lines[]

  @@index([name], map: "idx_manufacturers_name_pattern")
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_manufacturers_name_trgm", type: Gin)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model market_valuations {
  id                     String              @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  model_id               String?             @db.Uuid
  individual_guitar_id   String?             @db.Uuid
  valuation_date         DateTime            @db.Date
  low_estimate           Decimal?            @db.Decimal(12, 2)
  high_estimate          Decimal?            @db.Decimal(12, 2)
  average_estimate       Decimal?            @db.Decimal(12, 2)
  sale_price             Decimal?            @db.Decimal(12, 2)
  sale_venue             String?             @db.VarChar(100)
  condition_at_valuation String?             @db.VarChar(20)
  source_id              String?             @db.Uuid
  created_at             DateTime?           @default(now()) @db.Timestamptz(6)
  individual_guitars     individual_guitars? @relation(fields: [individual_guitar_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  models                 models?             @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  data_sources           data_sources?       @relation(fields: [source_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([valuation_date], map: "idx_market_valuations_date")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model models {
  id                            String                      @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  manufacturer_id               String?                     @db.Uuid
  product_line_id               String?                     @db.Uuid
  name                          String                      @db.VarChar(150)
  year                          Int
  production_type               String?                     @default("mass") @db.VarChar(20)
  production_start_date         DateTime?                   @db.Date
  production_end_date           DateTime?                   @db.Date
  estimated_production_quantity Int?
  msrp_original                 Decimal?                    @db.Decimal(10, 2)
  currency                      String?                     @default("USD") @db.VarChar(3)
  description                   String?
  created_at                    DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?                   @default(now()) @db.Timestamptz(6)
  finishes                      finishes[]
  individual_guitars            individual_guitars[]
  market_valuations             market_valuations[]
  manufacturers                 manufacturers?              @relation(fields: [manufacturer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_lines                 product_lines?              @relation(fields: [product_line_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  review_model_associations     review_model_associations[]
  specifications                specifications[]

  @@unique([manufacturer_id, name, year])
  @@index([manufacturer_id, year], map: "idx_models_manufacturer_year")
  @@index([name], map: "idx_models_name_pattern")
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_models_name_trgm", type: Gin)
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model product_lines {
  id                String         @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  manufacturer_id   String?        @db.Uuid
  name              String         @db.VarChar(100)
  description       String?
  introduced_year   Int?
  discontinued_year Int?
  created_at        DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?      @default(now()) @db.Timestamptz(6)
  models            models[]
  manufacturers     manufacturers? @relation(fields: [manufacturer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([name], map: "idx_product_lines_name_pattern")
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_product_lines_name_trgm", type: Gin)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model specifications {
  id                      String              @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  model_id                String?             @db.Uuid
  individual_guitar_id    String?             @db.Uuid
  body_wood               String?             @db.VarChar(50)
  neck_wood               String?             @db.VarChar(50)
  fingerboard_wood        String?             @db.VarChar(50)
  scale_length_inches     Decimal?            @db.Decimal(4, 2)
  num_frets               Int?
  nut_width_inches        Decimal?            @db.Decimal(3, 2)
  neck_profile            String?             @db.VarChar(50)
  bridge_type             String?             @db.VarChar(50)
  pickup_configuration    String?             @db.VarChar(20)
  pickup_brand            String?             @db.VarChar(50)
  pickup_model            String?             @db.VarChar(100)
  electronics_description String?
  hardware_finish         String?             @db.VarChar(50)
  body_finish             String?             @db.VarChar(100)
  weight_lbs              Decimal?            @db.Decimal(4, 2)
  case_included           Boolean?            @default(false)
  case_type               String?             @db.VarChar(50)
  created_at              DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?           @default(now()) @db.Timestamptz(6)
  individual_guitars      individual_guitars? @relation(fields: [individual_guitar_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  models                  models?             @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([individual_guitar_id], map: "idx_specifications_individual")
  @@index([model_id], map: "idx_specifications_model")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                             String          @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  username                                       String          @unique @db.VarChar(50)
  email                                          String          @unique @db.VarChar(255)
  password_hash                                  String          @db.VarChar(255)
  first_name                                     String?         @db.VarChar(50)
  last_name                                      String?         @db.VarChar(50)
  user_type                                      String?         @default("enthusiast") @db.VarChar(20)
  verified_expert                                Boolean?        @default(false)
  expertise_areas                                String?
  created_at                                     DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                                     DateTime?       @default(now()) @db.Timestamptz(6)
  contributions_contributions_reviewed_byTousers contributions[] @relation("contributions_reviewed_byTousers")
  contributions_contributions_user_idTousers     contributions[] @relation("contributions_user_idTousers")
  images_uploaded_by                             images[]        @relation("ImagesUploadedBy")
  images_validated_by                            images[]        @relation("ImagesValidatedBy")

  @@index([user_type], map: "idx_users_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model expert_reviews {
  id                        String                      @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  reviewer_name             String                      @db.VarChar(100)
  reviewer_credentials      String?
  review_title              String                      @db.VarChar(200)
  review_summary            String
  content_type              String?                     @default("review") @db.VarChar(50)
  condition_rating          Int?
  build_quality_rating      Int?
  value_rating              Int?
  overall_rating            Int?
  original_content_url      String?                     @db.VarChar(500)
  content_archived          Boolean?                    @default(false)
  content_hash              String?                     @db.VarChar(64)
  attestation_uid           String?                     @db.VarChar(66)
  verification_status       String?                     @default("pending") @db.VarChar(20)
  review_date               DateTime                    @db.Date
  created_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  review_model_associations review_model_associations[]

  @@index([review_date], map: "idx_expert_reviews_date")
  @@index([reviewer_name], map: "idx_expert_reviews_reviewer")
  @@index([content_type], map: "idx_expert_reviews_type")
  @@index([verification_status], map: "idx_expert_reviews_verification")
}

model review_model_associations {
  id             String          @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  review_id      String?         @db.Uuid
  model_id       String?         @db.Uuid
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  models         models?         @relation(fields: [model_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expert_reviews expert_reviews? @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([review_id, model_id])
  @@index([model_id], map: "idx_review_model_associations_model")
  @@index([review_id], map: "idx_review_model_associations_review")
}
